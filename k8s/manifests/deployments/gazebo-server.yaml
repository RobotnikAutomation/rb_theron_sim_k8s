---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robots-gazebo-server
  labels:
    app: gazebo-server
    group: robot-common-group
    robotType: simulated
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gazebo-server
      group: robot-common-group
      robotType: simulated
  replicas: 1
  template:
    metadata:
      labels:
        app: gazebo-server
        group: robot-common-group
        robotType: simulated
    spec:
      volumes:
        - name: shared-tmp
          emptyDir: {}
        - name: cyclone-dds-cfg
          configMap:
            name: cyclone-dds-local-config
      imagePullSecrets:
        - name: google-cloud-registry-access-west1
      containers:
        - name: gzserver
          image: >-
            robotnik/robotnik-simulations:rb-theron-gazebo-humble-0.3.0-rc03
          imagePullPolicy: Always
          volumeMounts:
            - name: shared-tmp
              mountPath: /tmp
            - name: cyclone-dds-cfg
              mountPath: /etc/cyclone-dds/cyclone-dds-profiles.xml
              subPath: cyclone-dds-profiles.xml
          env:
            - name: ROS_DOMAIN_ID
              valueFrom:
                configMapKeyRef:
                  name: robots-common
                  key: ros.domain.id
            - name: WORLD_NAME
              valueFrom:
                configMapKeyRef:
                  name: robots-common
                  key: gazebo.world
            - name: DEVELOPMENT_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: robots-common
                  key: devel.environment
            # Fixed configuration
            - name: GUI
              value: "false"
            - name: ROS_BU_LAUNCH
              value: >
                gazebo.launch.py
                gui:=$GUI
                verbose:=true
                world_name:=$WORLD_NAME
                -d
            - name: HEALTHCHECK_NODES
              value: "/gazebo"
            # - name: CYCLONEDDS_URI
            #   value: /etc/cyclone-dds/cyclone-dds-profiles.xml
          ports:
            - containerPort: 11345
              name: gazeboport
          resources:
            requests:
              cpu: 1200m
              memory: 500Mi
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/bash"
                  - "-c"
                  - |
                    if [[ $DEVELOPMENT_ENVIRONMENT == "true" ]]
                    then
                      exit 0
                    fi
                    sudo apt -y purge \
                      wget \
                      curl \
                    sudo apt clean
                    sudo sed -i '/%robot ALL=(ALL) NOPASSWD:ALL/d' /etc/sudoers
                    exit 0

          startupProbe:
            exec:
              command:
                - ros_entrypoint.sh
                - ros_healthcheck.sh
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - ros_entrypoint.sh
                - ros_healthcheck.sh
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
            timeoutSeconds: 10
          livenessProbe:
            exec:
              command:
                - ros_entrypoint.sh
                - ros_healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 30
            timeoutSeconds: 10
        - name: robot-1-spawner
          image: >-
            robotnik/robotnik-simulations:rb-theron-gazebo-humble-0.3.0-rc03
          imagePullPolicy: Always
          volumeMounts:
            - name: shared-tmp
              mountPath: /tmp
            - name: cyclone-dds-cfg
              mountPath: /etc/cyclone-dds/cyclone-dds-profiles.xml
              subPath: cyclone-dds-profiles.xml
          env:
            - name: ROS_DOMAIN_ID
              valueFrom:
                configMapKeyRef:
                  name: robots-common
                  key: ros.domain.id
            - name: DEVELOPMENT_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: robots-common
                  key: devel.environment
            - name: GPU
              valueFrom:
                configMapKeyRef:
                  name: robots-common
                  key: use.gpu
            - name: ROBOT_ID
              valueFrom:
                configMapKeyRef:
                  name: robot-1
                  key: id
            - name: ROBOT_DESCRIPTION_FILE
              valueFrom:
                configMapKeyRef:
                  name: robot-1
                  key: description.file
            - name: POS_X
              valueFrom:
                configMapKeyRef:
                  name: robot-1
                  key: init.position.x
            - name: POS_Y
              valueFrom:
                configMapKeyRef:
                  name: robot-1
                  key: init.position.y
            - name: POS_Z
              valueFrom:
                configMapKeyRef:
                  name: robot-1
                  key: init.position.z
            # Fixed configuration
            - name: CHECK_NODES
              value: "true"
            - name: NODES_TO_CHECK
              value: "/gazebo"
            - name: HEALTHCHECK_NODES
              value: >
                /${ROBOT_ID}/controller_manager
                /${ROBOT_ID}/front_laser
                /${ROBOT_ID}/imu
                /${ROBOT_ID}/rear_laser
                /${ROBOT_ID}/robot_state_publisher
                /${ROBOT_ID}/robotnik_base_control
                /${ROBOT_ID}/ros_control
            - name: ROS_BU_LAUNCH
              value: >
                spawn.launch.py
            # - name: CYCLONEDDS_URI
            #   value: /etc/cyclone-dds/cyclone-dds-profiles.xml
          resources:
            requests:
              cpu: 300m
              memory: 150Mi
          lifecycle:
            postStart:
              exec:
                command:
                  - "/bin/bash"
                  - "-c"
                  - |
                    if [[ $DEVELOPMENT_ENVIRONMENT == "true" ]]
                    then
                      exit 0
                    fi
                    sudo apt -y purge \
                      wget \
                      curl \
                    sudo apt clean
                    sudo sed -i '/%robot ALL=(ALL) NOPASSWD:ALL/d' /etc/sudoers
                    exit 0

          startupProbe:
            exec:
              command:
                - ros_entrypoint.sh
                - ros_healthcheck.sh
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - ros_entrypoint.sh
                - ros_healthcheck.sh
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
            timeoutSeconds: 10
          livenessProbe:
            exec:
              command:
                - ros_entrypoint.sh
                - ros_healthcheck.sh
            initialDelaySeconds: 60
            periodSeconds: 20
            failureThreshold: 30
            timeoutSeconds: 10
        # - name: zenoh-bridge
        #   image: >-
        #     robotnik/zenoh-dds-bridge:humble-0.7.2-rc-1
        #   imagePullPolicy: Always
        #   volumeMounts:
        #     - name: shared-tmp
        #       mountPath: /tmp
        #     - name: cyclone-dds-cfg
        #       mountPath: /etc/cyclone-dds/cyclone-dds-profiles.xml
        #       subPath: cyclone-dds-profiles.xml
        #   env:
        #     - name: CYCLONEDDS_URI
        #       value: /etc/cyclone-dds/cyclone-dds-profiles.xml
        #     - name: ROS_DOMAIN_ID
        #       valueFrom:
        #         configMapKeyRef:
        #           name: robots-common
        #           key: ros.domain.id
        #     - name: ZENOH_MULTICAST_SCOUTING
        #       valueFrom:
        #         configMapKeyRef:
        #           name: zenoh
        #           key: multicast.scouting
        #     - name: ZENOH_FORWARD_DISCOVERY
        #       valueFrom:
        #         configMapKeyRef:
        #           name: zenoh
        #           key: forward.discovery
        #     - name: ZENOH_LISTENERS
        #       valueFrom:
        #         configMapKeyRef:
        #           name: zenoh
        #           key: listeners
        #     - name: ZENOH_ENDPOINTS
        #       valueFrom:
        #         configMapKeyRef:
        #           name: zenoh
        #           key: endpoints
        #     - name: RUST_LOG
        #       value: debug
